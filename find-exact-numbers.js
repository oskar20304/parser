const fs = require('fs');
const path = require('path');

// –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –≤ HTML —Ñ–∞–π–ª–∞—Ö
function findExactNumbers() {
    console.log('üéØ –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª watchers –≤ HTML —Ñ–∞–π–ª–∞—Ö...\n');
    
    const debugDir = path.join(__dirname, 'debug');
    const files = fs.readdirSync(debugDir).filter(f => f.endsWith('.html'));
    
    // –¶–µ–ª–µ–≤—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    const targetNumbers = {
        'CLSK': ['51,527', '51527'],
        'HIVE': ['24,593', '24593']  
    };
    
    console.log('–ò—â–µ–º —á–∏—Å–ª–∞:');
    Object.entries(targetNumbers).forEach(([symbol, numbers]) => {
        console.log(`${symbol}: ${numbers.join(' –∏–ª–∏ ')}`);
    });
    console.log('\n' + '='.repeat(50) + '\n');
    
    for (const file of files) {
        const symbol = file.match(/debug_([A-Z]+)_/)[1];
        console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ ${symbol} (${file}):`);
        
        if (!targetNumbers[symbol]) {
            console.log(`‚ùå –¶–µ–ª–µ–≤—ã–µ —á–∏—Å–ª–∞ –¥–ª—è ${symbol} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã`);
            continue;
        }
        
        const htmlContent = fs.readFileSync(path.join(debugDir, file), 'utf8');
        const lines = htmlContent.split('\n');
        
        let found = false;
        
        // –ü–æ–∏—Å–∫ –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∏—Å–ª–∞
        for (const targetNumber of targetNumbers[symbol]) {
            console.log(`\nüéØ –ü–æ–∏—Å–∫ —á–∏—Å–ª–∞ "${targetNumber}":`);
            
            const matches = [];
            
            lines.forEach((line, lineIndex) => {
                if (line.includes(targetNumber)) {
                    matches.push({
                        lineNumber: lineIndex + 1,
                        line: line.trim(),
                        // –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
                        position: line.indexOf(targetNumber)
                    });
                }
            });
            
            if (matches.length > 0) {
                found = true;
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matches.length} –≤—Ö–æ–∂–¥–µ–Ω–∏–π:`);
                
                matches.forEach((match, index) => {
                    console.log(`\n${index + 1}. –°—Ç—Ä–æ–∫–∞ ${match.lineNumber}:`);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —á–∏—Å–ª–∞
                    const beforeText = match.line.substring(0, match.position);
                    const afterText = match.line.substring(match.position + targetNumber.length);
                    
                    // –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    const contextBefore = beforeText.length > 100 ? '...' + beforeText.slice(-100) : beforeText;
                    const contextAfter = afterText.length > 100 ? afterText.slice(0, 100) + '...' : afterText;
                    
                    console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${contextBefore}[${targetNumber}]${contextAfter}`);
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    const classMatches = match.line.match(/class=["']([^"']*)["']/g);
                    if (classMatches) {
                        console.log(`   üìã CSS –∫–ª–∞—Å—Å—ã: ${classMatches.join(', ')}`);
                    }
                    
                    // –ò—â–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
                    const idMatches = match.line.match(/id=["']([^"']*)["']/g);
                    if (idMatches) {
                        console.log(`   üÜî ID: ${idMatches.join(', ')}`);
                    }
                    
                    // –ò—â–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
                    const dataMatches = match.line.match(/data-[^=]*=["']([^"']*)["']/g);
                    if (dataMatches) {
                        console.log(`   üìä Data –∞—Ç—Ä–∏–±—É—Ç—ã: ${dataMatches.slice(0, 3).join(', ')}${dataMatches.length > 3 ? '...' : ''}`);
                    }
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
                    const tagMatch = match.line.match(/<(\w+)[^>]*>/);
                    if (tagMatch) {
                        console.log(`   üè∑Ô∏è HTML —Ç–µ–≥: <${tagMatch[1]}>`);
                    }
                });
                
                // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞
                console.log(`\nüß† –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è "${targetNumber}":`);
                analyzePatterns(matches, targetNumber);
                
            } else {
                console.log(`‚ùå –ß–∏—Å–ª–æ "${targetNumber}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        }
        
        if (!found) {
            console.log(`\nüí° –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ —á–∏—Å–ª–∞ (¬±100 –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö):`);
            findSimilarNumbers(htmlContent, targetNumbers[symbol], symbol);
        }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('\nüéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');
    
    // –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    console.log('1. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:');
    console.log('2. –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —á–∏—Å–ª–∞ watchers:');
    console.log('3. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞:');
}

function analyzePatterns(matches, targetNumber) {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ CSS –∫–ª–∞—Å—Å—ã
    const allClasses = [];
    const allTags = [];
    const commonKeywords = [];
    
    matches.forEach(match => {
        // CSS –∫–ª–∞—Å—Å—ã
        const classMatches = match.line.match(/class=["']([^"']*)["']/g);
        if (classMatches) {
            classMatches.forEach(cls => {
                const classes = cls.match(/class=["']([^"']*)["']/)[1].split(' ');
                allClasses.push(...classes);
            });
        }
        
        // HTML —Ç–µ–≥–∏
        const tagMatch = match.line.match(/<(\w+)[^>]*>/);
        if (tagMatch) {
            allTags.push(tagMatch[1]);
        }
        
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ä—è–¥–æ–º —Å —á–∏—Å–ª–æ–º
        const context = match.line.toLowerCase();
        const keywords = ['watch', 'watcher', 'watching', 'follow', 'follower', 'following', 'member', 'subscriber'];
        keywords.forEach(keyword => {
            if (context.includes(keyword)) {
                commonKeywords.push(keyword);
            }
        });
    });
    
    // –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (allClasses.length > 0) {
        const classFreq = {};
        allClasses.forEach(cls => {
            if (cls.trim()) {
                classFreq[cls] = (classFreq[cls] || 0) + 1;
            }
        });
        
        const topClasses = Object.entries(classFreq)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5);
        
        if (topClasses.length > 0) {
            console.log(`   üìã –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ CSS –∫–ª–∞—Å—Å—ã:`);
            topClasses.forEach(([cls, count]) => {
                console.log(`      .${cls} (${count}x)`);
            });
        }
    }
    
    if (allTags.length > 0) {
        console.log(`   üè∑Ô∏è HTML —Ç–µ–≥–∏: ${[...new Set(allTags)].join(', ')}`);
    }
    
    if (commonKeywords.length > 0) {
        console.log(`   üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: ${[...new Set(commonKeywords)].join(', ')}`);
    }
}

function findSimilarNumbers(htmlContent, targetNumbers, symbol) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö —á–∏—Å–µ–ª
    const targetValues = targetNumbers.map(num => {
        return parseInt(num.replace(/,/g, ''));
    });
    
    // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±1000 –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö
    const allNumbers = htmlContent.match(/\b\d{1,3}(,\d{3})*\b/g) || [];
    const similarNumbers = [];
    
    allNumbers.forEach(num => {
        const value = parseInt(num.replace(/,/g, ''));
        targetValues.forEach(target => {
            if (Math.abs(value - target) <= 1000 && value >= 10000) {
                similarNumbers.push({
                    number: num,
                    value: value,
                    target: target,
                    diff: Math.abs(value - target)
                });
            }
        });
    });
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É
    const uniqueSimilar = similarNumbers
        .filter((num, index, self) => 
            index === self.findIndex(n => n.number === num.number)
        )
        .sort((a, b) => a.diff - b.diff)
        .slice(0, 5);
    
    if (uniqueSimilar.length > 0) {
        console.log(`   –ü–æ—Ö–æ–∂–∏–µ —á–∏—Å–ª–∞ –¥–ª—è ${symbol}:`);
        uniqueSimilar.forEach(num => {
            console.log(`   ${num.number} (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –Ω–∞ ${num.diff} –æ—Ç ${num.target})`);
        });
    } else {
        console.log(`   –ü–æ—Ö–æ–∂–∏—Ö —á–∏—Å–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
findExactNumbers();