const fs = require('fs');
const path = require('path');

// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ watchers –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–ª–∞—Å—Å–æ–º SymbolWatchers_watchers__sp1FU
function extractMaraNumber() {
    console.log('üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ watchers –∏–∑ MARA —Å –∫–ª–∞—Å—Å–æ–º SymbolWatchers_watchers__sp1FU...\n');
    
    const debugDir = path.join(__dirname, 'debug');
    const maraFile = fs.readdirSync(debugDir).find(f => f.includes('MARA'));
    
    if (!maraFile) {
        console.log('‚ùå –§–∞–π–ª MARA –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${maraFile}\n`);
    
    const htmlContent = fs.readFileSync(path.join(debugDir, maraFile), 'utf8');
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º SymbolWatchers_watchers__sp1FU
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–ª–∞—Å—Å–æ–º SymbolWatchers_watchers__sp1FU...');
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const classPattern = /class="[^"]*SymbolWatchers_watchers__sp1FU[^"]*"[^>]*>([^<]*(?:<[^>\/]*\/>[^<]*)*)/g;
    const matches = [...htmlContent.matchAll(classPattern)];
    
    if (matches.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matches.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–æ–º SymbolWatchers_watchers__sp1FU:\n`);
        
        matches.forEach((match, index) => {
            console.log(`${index + 1}. –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:`);
            console.log(`   –ö–ª–∞—Å—Å: ${match[0].substring(0, 100)}...`);
            console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${match[1]}"`);
            
            // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            const numbers = match[1].match(/\d{1,3}(,\d{3})*/g);
            if (numbers) {
                console.log(`   üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –ß–ò–°–õ–ê: ${numbers.join(', ')}`);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è watchers
                const validNumbers = numbers.filter(num => {
                    const value = parseInt(num.replace(/,/g, ''));
                    return value >= 1000 && value <= 200000;
                });
                
                if (validNumbers.length > 0) {
                    console.log(`   ‚≠ê –ü–û–î–•–û–î–Ø–©–ò–ï –ß–ò–°–õ–ê: ${validNumbers.join(', ')}`);
                } else {
                    console.log(`   ‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∏—Å–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1,000-200,000)`);
                }
            } else {
                console.log(`   ‚ùå –ß–∏—Å–ª–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
            
            console.log('');
        });
    } else {
        console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º SymbolWatchers_watchers__sp1FU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: –∏—â–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
    console.log('üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–ª–∞—Å—Å–∞...');
    
    const contextPattern = /SymbolWatchers_watchers__sp1FU[^>]*>[^<]*</g;
    const contextMatches = [...htmlContent.matchAll(contextPattern)];
    
    if (contextMatches.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${contextMatches.length} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤:`);
        
        contextMatches.forEach((match, index) => {
            console.log(`${index + 1}. ${match[0]}`);
            
            // –ù–∞–π–¥–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ HTML –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ä—è–¥–æ–º
            const position = htmlContent.indexOf(match[0]);
            const beforeContext = htmlContent.substring(Math.max(0, position - 100), position);
            const afterContext = htmlContent.substring(position + match[0].length, position + match[0].length + 200);
            
            console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç –î–û: ...${beforeContext.slice(-50)}`);
            console.log(`   –ö–æ–Ω—Ç–µ–∫—Å—Ç –ü–û–°–õ–ï: ${afterContext.substring(0, 100)}...`);
            
            // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            const fullContext = beforeContext + match[0] + afterContext;
            const contextNumbers = fullContext.match(/>\s*(\d{1,3}(?:,\d{3})*)\s*</g);
            
            if (contextNumbers) {
                const cleanNumbers = contextNumbers.map(n => n.match(/\d{1,3}(?:,\d{3})*/)[0]);
                const uniqueNumbers = [...new Set(cleanNumbers)];
                
                console.log(`   üéØ –ß–ò–°–õ–ê –í –ö–û–ù–¢–ï–ö–°–¢–ï: ${uniqueNumbers.join(', ')}`);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è watchers
                const validNumbers = uniqueNumbers.filter(num => {
                    const value = parseInt(num.replace(/,/g, ''));
                    return value >= 1000 && value <= 200000;
                });
                
                if (validNumbers.length > 0) {
                    console.log(`   ‚≠ê –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–´–ï WATCHERS: ${validNumbers.join(', ')}`);
                    
                    if (validNumbers.length === 1) {
                        console.log(`   üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: ${validNumbers[0]}`);
                    }
                }
            } else {
                console.log(`   ‚ùå –ß–∏—Å–ª–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
            
            console.log('');
        });
    }
    
    console.log('='.repeat(80));
}

// –ó–∞–ø—É—Å–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
extractMaraNumber();