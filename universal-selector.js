/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é CSS –∫–ª–∞—Å—Å–∞
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É CSS Modules —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
 * 
 * –ù–∞–ø—Ä–∏–º–µ—Ä: 
 * SymbolHeader_watchers__nFkZq -> findByPartialClass(page, 'SymbolHeader_watchers__')
 * SymbolWatchers_watchers__sp1FU -> findByPartialClass(page, 'SymbolWatchers_watchers__')
 */

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é CSS –∫–ª–∞—Å—Å–∞
 * @param {Page} page - Puppeteer page –æ–±—ä–µ–∫—Ç
 * @param {string} partialClass - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞ (–±–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞)
 * @param {boolean} getTextContent - –ï—Å–ª–∏ true, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @returns {Promise<string|null>} –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ null –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
async function findByPartialClass(page, partialClass, getTextContent = true) {
    console.log(`üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É –∫–ª–∞—Å—Å—É: "${partialClass}"`);
    
    const result = await page.evaluate((partialClass, getTextContent) => {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const allElements = document.querySelectorAll('*');
        
        for (let element of allElements) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º className —ç–ª–µ–º–µ–Ω—Ç–∞
            if (element.className && typeof element.className === 'string') {
                // –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
                const classNames = element.className.split(' ');
                
                // –ò—â–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å partialClass
                const matchingClass = classNames.find(className => 
                    className.startsWith(partialClass)
                );
                
                if (matchingClass) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º: "${matchingClass}"`);
                    
                    if (getTextContent) {
                        const textContent = element.textContent?.trim() || '';
                        console.log(`üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞: "${textContent}"`);
                        return {
                            found: true,
                            className: matchingClass,
                            textContent: textContent,
                            innerHTML: element.innerHTML,
                            tagName: element.tagName.toLowerCase()
                        };
                    } else {
                        return {
                            found: true,
                            className: matchingClass,
                            tagName: element.tagName.toLowerCase()
                        };
                    }
                }
            }
        }
        
        return { found: false };
    }, partialClass, getTextContent);
    
    if (result.found) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–ª–∞—Å—Å–æ–º: ${result.className}`);
        console.log(`üìã –¢–µ–≥: <${result.tagName}>`);
        
        if (getTextContent && result.textContent) {
            console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${result.textContent}"`);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            const numberMatch = result.textContent.match(/\d{1,3}(,\d{3})*/);
            if (numberMatch) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ: ${numberMatch[0]}`);
                return numberMatch[0];
            }
        }
        
        return result;
    } else {
        console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∫–ª–∞—Å—Å–æ–º "${partialClass}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —á–∏—Å–ª–æ watchers –∏—Å–ø–æ–ª—å–∑—É—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
 * @param {Page} page - Puppeteer page –æ–±—ä–µ–∫—Ç
 * @param {string} symbol - –°–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @returns {Promise<string|null>} –ß–∏—Å–ª–æ watchers –∏–ª–∏ null
 */
async function findWatchersNumber(page, symbol) {
    console.log(`\nüéØ –ü–æ–∏—Å–∫ —á–∏—Å–ª–∞ watchers –¥–ª—è —Å–∏–º–≤–æ–ª–∞: ${symbol}`);
    
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è watchers
    const watcherPatterns = [
        'SymbolHeader_watchers__',
        'SymbolWatchers_watchers__',
        'WatchersCount_',
        'Watchers_',
        'watchers__',
        'watch-count__',
        'symbol-watchers__'
    ];
    
    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    for (const pattern of watcherPatterns) {
        console.log(`\nüîç –ü–æ–ø—ã—Ç–∫–∞ ${pattern}...`);
        
        const result = await findByPartialClass(page, pattern, true);
        
        if (result && typeof result === 'string') {
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–æ –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª—è watchers
            const numericValue = parseInt(result.replace(/,/g, ''));
            if (numericValue >= 1000 && numericValue <= 500000) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ watchers: ${result} (–∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ç—Ç–µ—Ä–Ω: ${pattern})`);
                return result;
            } else {
                console.log(`‚ö†Ô∏è –ß–∏—Å–ª–æ ${result} –≤–Ω–µ —Ä–∞–∑—É–º–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è watchers`);
            }
        }
    }
    
    console.log(`‚ùå –ß–∏—Å–ª–æ watchers –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤`);
    return null;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 * @param {Page} page - Puppeteer page –æ–±—ä–µ–∫—Ç
 * @param {string} partialClass - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
async function findAllByPartialClass(page, partialClass) {
    console.log(`üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∫–ª–∞—Å—Å–æ–º: "${partialClass}"`);
    
    const results = await page.evaluate((partialClass) => {
        const allElements = document.querySelectorAll('*');
        const matches = [];
        
        for (let element of allElements) {
            if (element.className && typeof element.className === 'string') {
                const classNames = element.className.split(' ');
                const matchingClass = classNames.find(className => 
                    className.startsWith(partialClass)
                );
                
                if (matchingClass) {
                    matches.push({
                        className: matchingClass,
                        textContent: element.textContent?.trim() || '',
                        tagName: element.tagName.toLowerCase(),
                        innerHTML: element.innerHTML
                    });
                }
            }
        }
        
        return matches;
    }, partialClass);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∫–ª–∞—Å—Å–æ–º "${partialClass}"`);
    
    results.forEach((result, index) => {
        console.log(`${index + 1}. –ö–ª–∞—Å—Å: ${result.className}`);
        console.log(`   –¢–µ–≥: <${result.tagName}>`);
        console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${result.textContent.substring(0, 100)}${result.textContent.length > 100 ? '...' : ''}"`);
        
        // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        const numberMatch = result.textContent.match(/\d{1,3}(,\d{3})*/);
        if (numberMatch) {
            console.log(`   üéØ –ß–∏—Å–ª–æ: ${numberMatch[0]}`);
        }
        console.log('');
    });
    
    return results;
}

module.exports = {
    findByPartialClass,
    findWatchersNumber,
    findAllByPartialClass
};