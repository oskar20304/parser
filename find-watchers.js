const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ watchers
function findWatchersInDebugFiles() {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ watchers –≤ HTML —Ñ–∞–π–ª–∞—Ö...\n');
    
    const debugDir = path.join(__dirname, 'debug');
    const files = fs.readdirSync(debugDir).filter(f => f.endsWith('.html'));
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n`);
    
    const results = {};
    
    for (const file of files) {
        const symbol = file.match(/debug_([A-Z]+)_/)[1];
        console.log(`\n=== –ê–Ω–∞–ª–∏–∑ ${symbol} ===`);
        
        const htmlContent = fs.readFileSync(path.join(debugDir, file), 'utf8');
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ "watcher" –∏–ª–∏ "watching"
        console.log('\nüéØ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å "watcher/watching":');
        const watcherMatches = findWatcherContext(htmlContent);
        watcherMatches.forEach((match, index) => {
            console.log(`${index + 1}. ${match.number} - ${match.context.substring(0, 80)}...`);
        });
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (JSON-LD)
        console.log('\nüìä –ü–æ–∏—Å–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
        const jsonMatches = findInStructuredData(htmlContent);
        jsonMatches.forEach((match, index) => {
            console.log(`${index + 1}. ${match.number} - ${match.source}`);
        });
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º —Å "watch" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        console.log('\nüé® –ü–æ–∏—Å–∫ –ø–æ CSS –∫–ª–∞—Å—Å–∞–º —Å "watch":');
        const cssMatches = findByWatcherClasses(htmlContent);
        cssMatches.forEach((match, index) => {
            console.log(`${index + 1}. ${match.number} - –ö–ª–∞—Å—Å: ${match.className}`);
        });
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª —Ä—è–¥–æ–º —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ "followers" –∏–ª–∏ "members"
        console.log('\nüë• –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª —Ä—è–¥–æ–º —Å "followers/members":');
        const followerMatches = findFollowerNumbers(htmlContent);
        followerMatches.forEach((match, index) => {
            console.log(`${index + 1}. ${match.number} - ${match.context.substring(0, 60)}...`);
        });
        
        results[symbol] = {
            watcherMatches,
            jsonMatches,
            cssMatches,
            followerMatches
        };
        
        console.log(`\nüìã –ò—Ç–æ–≥–æ –¥–ª—è ${symbol}: ${watcherMatches.length + jsonMatches.length + cssMatches.length + followerMatches.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    console.log('\n\nüß† –ê–ù–ê–õ–ò–ó –û–ë–©–ò–• –ü–ê–¢–¢–ï–†–ù–û–í:');
    analyzeCommonPatterns(results);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —á–∏—Å–ª–∞
    console.log('\n\nüéØ –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–´–ï WATCHERS:');
    suggestMostLikelyWatchers(results);
}

function findWatcherContext(html) {
    const matches = [];
    const lines = html.split('\n');
    
    lines.forEach(line => {
        const lowerLine = line.toLowerCase();
        
        if (lowerLine.includes('watch') || lowerLine.includes('follow')) {
            // –ù–∞–π—Ç–∏ –≤—Å–µ —á–∏—Å–ª–∞ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
            const numbers = line.match(/\b\d{1,3}(,\d{3})*\b/g);
            if (numbers) {
                numbers.forEach(num => {
                    const value = parseInt(num.replace(/,/g, ''));
                    // –§–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–∑—É–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π watchers
                    if (value >= 1000 && value <= 500000) {
                        matches.push({
                            number: num,
                            value: value,
                            context: line.replace(/\s+/g, ' ').trim()
                        });
                    }
                });
            }
        }
    });
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
    const unique = matches.filter((match, index, self) => 
        index === self.findIndex(m => m.number === match.number)
    );
    
    return unique.sort((a, b) => b.value - a.value).slice(0, 5);
}

function findInStructuredData(html) {
    const matches = [];
    
    // –ü–æ–∏—Å–∫ JSON-LD –¥–∞–Ω–Ω—ã—Ö
    const jsonLdRegex = /<script[^>]*type=["']application\/ld\+json["'][^>]*>(.*?)<\/script>/gis;
    let jsonMatch;
    
    while ((jsonMatch = jsonLdRegex.exec(html)) !== null) {
        try {
            const jsonData = JSON.parse(jsonMatch[1]);
            const jsonString = JSON.stringify(jsonData);
            
            // –ò—â–µ–º –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ watchers
            const fields = ['watchCount', 'followerCount', 'memberCount', 'subscriberCount'];
            
            fields.forEach(field => {
                const fieldRegex = new RegExp(`"${field}"[\\s]*:[\\s]*(\\d+)`, 'gi');
                const fieldMatch = fieldRegex.exec(jsonString);
                if (fieldMatch) {
                    const value = parseInt(fieldMatch[1]);
                    if (value >= 1000 && value <= 500000) {
                        matches.push({
                            number: value.toLocaleString(),
                            value: value,
                            source: `JSON-LD ${field}`
                        });
                    }
                }
            });
            
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        }
    }
    
    // –ü–æ–∏—Å–∫ –≤ data-react-props –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã—Ö
    const reactPropsRegex = /data-react-props=["']([^"']+)["']/gi;
    let propsMatch;
    
    while ((propsMatch = reactPropsRegex.exec(html)) !== null) {
        try {
            const decodedProps = decodeURIComponent(propsMatch[1]);
            const numbers = decodedProps.match(/\b\d{1,3}(,\d{3})*\b/g);
            
            if (numbers) {
                numbers.forEach(num => {
                    const value = parseInt(num.replace(/,/g, ''));
                    if (value >= 1000 && value <= 500000) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        const contextBefore = decodedProps.substring(Math.max(0, decodedProps.indexOf(num) - 50), decodedProps.indexOf(num));
                        const contextAfter = decodedProps.substring(decodedProps.indexOf(num) + num.length, decodedProps.indexOf(num) + num.length + 50);
                        const context = contextBefore + num + contextAfter;
                        
                        if (context.toLowerCase().includes('watch') || context.toLowerCase().includes('follow')) {
                            matches.push({
                                number: num,
                                value: value,
                                source: 'React Props (watcher context)'
                            });
                        }
                    }
                });
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
    }
    
    return matches.filter((match, index, self) => 
        index === self.findIndex(m => m.number === match.number)
    ).sort((a, b) => b.value - a.value).slice(0, 3);
}

function findByWatcherClasses(html) {
    const matches = [];
    
    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ "watch", "follow", "member"
    const classRegex = /class=["']([^"']*(?:watch|Watch|follow|Follow|member|Member)[^"']*)["'][^>]*>([^<]*\d[^<]*)</gi;
    let classMatch;
    
    while ((classMatch = classRegex.exec(html)) !== null) {
        const className = classMatch[1];
        const content = classMatch[2];
        
        const numbers = content.match(/\b\d{1,3}(,\d{3})*\b/g);
        if (numbers) {
            numbers.forEach(num => {
                const value = parseInt(num.replace(/,/g, ''));
                if (value >= 1000 && value <= 500000) {
                    matches.push({
                        number: num,
                        value: value,
                        className: className
                    });
                }
            });
        }
    }
    
    return matches.filter((match, index, self) => 
        index === self.findIndex(m => m.number === match.number && m.className === match.className)
    ).sort((a, b) => b.value - a.value).slice(0, 3);
}

function findFollowerNumbers(html) {
    const matches = [];
    const lines = html.split('\n');
    
    lines.forEach(line => {
        const lowerLine = line.toLowerCase();
        
        if (lowerLine.includes('follower') || lowerLine.includes('member') || lowerLine.includes('subscriber')) {
            const numbers = line.match(/\b\d{1,3}(,\d{3})*\b/g);
            if (numbers) {
                numbers.forEach(num => {
                    const value = parseInt(num.replace(/,/g, ''));
                    if (value >= 1000 && value <= 500000) {
                        matches.push({
                            number: num,
                            value: value,
                            context: line.replace(/\s+/g, ' ').trim()
                        });
                    }
                });
            }
        }
    });
    
    return matches.filter((match, index, self) => 
        index === self.findIndex(m => m.number === match.number)
    ).sort((a, b) => b.value - a.value).slice(0, 3);
}

function analyzeCommonPatterns(results) {
    const allNumbers = {};
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    Object.entries(results).forEach(([symbol, data]) => {
        const symbolNumbers = [];
        
        [...data.watcherMatches, ...data.jsonMatches, ...data.cssMatches, ...data.followerMatches].forEach(match => {
            symbolNumbers.push(match.number);
        });
        
        allNumbers[symbol] = [...new Set(symbolNumbers)]; // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        console.log(`${symbol}: [${allNumbers[symbol].join(', ')}]`);
    });
    
    // –ò—â–µ–º —á–∏—Å–ª–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö
    const numberFrequency = {};
    Object.values(allNumbers).flat().forEach(num => {
        numberFrequency[num] = (numberFrequency[num] || 0) + 1;
    });
    
    console.log('\nüìä –ß–∞—Å—Ç–æ—Ç–∞ —á–∏—Å–µ–ª –ø–æ —Ñ–∞–π–ª–∞–º:');
    Object.entries(numberFrequency)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 10)
        .forEach(([num, count]) => {
            console.log(`${num}: ${count} —Ñ–∞–π–ª(–æ–≤)`);
        });
}

function suggestMostLikelyWatchers(results) {
    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞:');
    
    Object.entries(results).forEach(([symbol, data]) => {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: watcher context > CSS classes > followers > JSON
        const priorityNumbers = [];
        
        // –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —á–∏—Å–ª–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º "watcher"
        data.watcherMatches.slice(0, 2).forEach(match => {
            priorityNumbers.push({
                number: match.number,
                value: match.value,
                priority: 4,
                reason: 'Watcher context'
            });
        });
        
        // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - CSS –∫–ª–∞—Å—Å—ã
        data.cssMatches.slice(0, 2).forEach(match => {
            priorityNumbers.push({
                number: match.number,
                value: match.value,
                priority: 3,
                reason: 'CSS watcher class'
            });
        });
        
        // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - followers/members
        data.followerMatches.slice(0, 1).forEach(match => {
            priorityNumbers.push({
                number: match.number,
                value: match.value,
                priority: 2,
                reason: 'Follower/member context'
            });
        });
        
        // –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π - JSON –¥–∞–Ω–Ω—ã–µ
        data.jsonMatches.slice(0, 1).forEach(match => {
            priorityNumbers.push({
                number: match.number,
                value: match.value,
                priority: 1,
                reason: 'Structured data'
            });
        });
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        const uniqueNumbers = priorityNumbers.filter((num, index, self) => 
            index === self.findIndex(n => n.number === num.number)
        ).sort((a, b) => b.priority - a.priority);
        
        console.log(`\n${symbol}:`);
        uniqueNumbers.slice(0, 3).forEach((num, index) => {
            console.log(`  ${index + 1}. ${num.number} (${num.reason})`);
        });
        
        if (uniqueNumbers.length > 0) {
            console.log(`  ‚≠ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ${uniqueNumbers[0].number}`);
        }
    });
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
findWatchersInDebugFiles();