const fs = require('fs');
const path = require('path');

// –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ 24,593 –≤ —Ñ–∞–π–ª–µ HIVE
function findHiveNumber() {
    console.log('üéØ –ü–æ–∏—Å–∫ —á–∏—Å–ª–∞ 24,593 –≤ —Ñ–∞–π–ª–µ HIVE...\n');
    
    const debugDir = path.join(__dirname, 'debug');
    const hiveFile = fs.readdirSync(debugDir).find(f => f.includes('HIVE'));
    
    if (!hiveFile) {
        console.log('‚ùå –§–∞–π–ª HIVE –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${hiveFile}\n`);
    
    const htmlContent = fs.readFileSync(path.join(debugDir, hiveFile), 'utf8');
    const lines = htmlContent.split('\n');
    
    // –ò—â–µ–º —á–∏—Å–ª–æ 24,593
    const targetNumber = '24,593';
    let found = false;
    
    lines.forEach((line, lineIndex) => {
        if (line.includes(targetNumber)) {
            found = true;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${lineIndex + 1}:\n`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —á–∏—Å–ª–∞
            const position = line.indexOf(targetNumber);
            const beforeText = line.substring(0, position);
            const afterText = line.substring(position + targetNumber.length);
            
            // –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            const contextBefore = beforeText.length > 150 ? '...' + beforeText.slice(-150) : beforeText;
            const contextAfter = afterText.length > 150 ? afterText.slice(0, 150) + '...' : afterText;
            
            console.log(`üéØ –ö–û–ù–¢–ï–ö–°–¢:`);
            console.log(`${contextBefore}[${targetNumber}]${contextAfter}\n`);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            console.log(`üè∑Ô∏è CSS –ö–õ–ê–°–°–´ –ò –°–ï–õ–ï–ö–¢–û–†–´:`);
            const classMatches = line.match(/class=["']([^"']*)["']/g);
            if (classMatches) {
                console.log(`   –ö–ª–∞—Å—Å—ã: ${classMatches.join(', ')}\n`);
            } else {
                console.log(`   –ö–ª–∞—Å—Å—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n`);
            }
            
            // –ò—â–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            const idMatches = line.match(/id=["']([^"']*)["']/g);
            if (idMatches) {
                console.log(`   ID: ${idMatches.join(', ')}\n`);
            }
            
            // –ò—â–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
            const dataMatches = line.match(/data-[^=]*=["']([^"']*)["']/g);
            if (dataMatches) {
                console.log(`   Data –∞—Ç—Ä–∏–±—É—Ç—ã: ${dataMatches.slice(0, 5).join(', ')}\n`);
            }
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∫—Ä—É–≥ —á–∏—Å–ª–∞
            console.log(`üìã –ê–ù–ê–õ–ò–ó HTML –°–¢–†–£–ö–¢–£–†–´:`);
            
            // –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º
            const beforeTags = beforeText.match(/<(\w+)[^>]*>/g);
            if (beforeTags) {
                console.log(`   –¢–µ–≥–∏ –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º: ${beforeTags.slice(-3).join(' ')}`);
            }
            
            // –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞  
            const afterTags = afterText.match(/<\/(\w+)>/g);
            if (afterTags) {
                console.log(`   –¢–µ–≥–∏ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞: ${afterTags.slice(0, 3).join(' ')}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            console.log(`\nüîë –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –†–Ø–î–û–ú –° –ß–ò–°–õ–û–ú:`);
            const context = (beforeText + afterText).toLowerCase();
            const keywords = ['watch', 'watcher', 'watching', 'follow', 'follower', 'following', 'member', 'subscriber'];
            const foundKeywords = keywords.filter(keyword => context.includes(keyword));
            
            if (foundKeywords.length > 0) {
                console.log(`   –ù–∞–π–¥–µ–Ω—ã: ${foundKeywords.join(', ')}`);
            } else {
                console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
            
            console.log(`\n${'='.repeat(80)}\n`);
        }
    });
    
    if (!found) {
        console.log(`‚ùå –ß–∏—Å–ª–æ ${targetNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ ${hiveFile}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        console.log(`\nüîç –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤...`);
        const alternatives = ['24593', '24.593', '24 593'];
        
        alternatives.forEach(alt => {
            if (htmlContent.includes(alt)) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${alt}`);
            }
        });
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
findHiveNumber();