const fs = require('fs');
const path = require('path');

// –ü–æ–∏—Å–∫ watchers —Å –≥–∏–±–∫–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
function findFlexibleWatchers() {
    console.log('üéØ –ü–æ–∏—Å–∫ watchers —Å –≥–∏–±–∫–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –∫–ª–∞—Å—Å–æ–≤...\n');
    
    const debugDir = path.join(__dirname, 'debug');
    const maraFiles = fs.readdirSync(debugDir).filter(f => f.includes('MARA'));
    
    if (maraFiles.length === 0) {
        console.log('‚ùå –§–∞–π–ª—ã MARA –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    maraFiles.forEach((file, index) => {
        console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª ${index + 1}: ${file}\n`);
        
        const htmlContent = fs.readFileSync(path.join(debugDir, file), 'utf8');
        
        // –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å SymbolHeader_watchers__
        console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤ SymbolHeader_watchers__*');
        
        const watchersClassPattern = /class="[^"]*SymbolHeader_watchers__[^"]*"/g;
        const watchersClasses = [...htmlContent.matchAll(watchersClassPattern)];
        
        if (watchersClasses.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${watchersClasses.length} –∫–ª–∞—Å—Å–æ–≤ —Å SymbolHeader_watchers__:`);
            
            watchersClasses.forEach((match, i) => {
                console.log(`   ${i + 1}. ${match[0]}`);
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º
                const elementPattern = new RegExp(match[0].replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + '[^>]*>([^<]*)', 'g');
                const elementMatches = [...htmlContent.matchAll(elementPattern)];
                
                elementMatches.forEach((elementMatch, j) => {
                    const content = elementMatch[1].trim();
                    console.log(`      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ${j + 1}: "${content}"`);
                    
                    const numberMatch = content.match(/\d{1,3}(,\d{3})*/);
                    if (numberMatch) {
                        console.log(`      üéØ –ù–ê–ô–î–ï–ù–û –ß–ò–°–õ–û: ${numberMatch[0]}`);
                    }
                });
            });
        } else {
            console.log('‚ùå –ö–ª–∞—Å—Å—ã SymbolHeader_watchers__ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        console.log('');
        
        // –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å SymbolHeader_watchButton__
        console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ SymbolHeader_watchButton__*');
        
        const watchButtonPattern = /SymbolHeader_watchButton__[a-zA-Z0-9_]+/g;
        const watchButtonClasses = [...htmlContent.matchAll(watchButtonPattern)];
        
        if (watchButtonClasses.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${watchButtonClasses.length} –∫–ª–∞—Å—Å–æ–≤ –∫–Ω–æ–ø–∫–∏ Watch:`);
            
            watchButtonClasses.forEach((match, i) => {
                console.log(`   ${i + 1}. ${match[0]}`);
            });
            
            // –ò—â–µ–º —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
            const firstButtonIndex = htmlContent.indexOf(watchButtonClasses[0][0]);
            const contextBefore = htmlContent.substring(Math.max(0, firstButtonIndex - 300), firstButtonIndex);
            
            console.log('   üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):');
            console.log(`   ...${contextBefore.slice(-100)}`);
            
            // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            const numbersInContext = contextBefore.match(/>\s*(\d{1,3}(?:,\d{3})*)\s*</g);
            if (numbersInContext) {
                const cleanNumbers = numbersInContext.map(n => n.match(/\d{1,3}(?:,\d{3})*/)[0]);
                console.log(`   üéØ –ß–ò–°–õ–ê –ü–ï–†–ï–î –ö–ù–û–ü–ö–û–ô: ${cleanNumbers.join(', ')}`);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è watchers
                const validNumbers = cleanNumbers.filter(num => {
                    const value = parseInt(num.replace(/,/g, ''));
                    return value >= 1000 && value <= 200000;
                });
                
                if (validNumbers.length > 0) {
                    console.log(`   ‚≠ê –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–û–ï: ${validNumbers[validNumbers.length - 1]}`);
                } else {
                    console.log(`   ‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∏—Å–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                }
            } else {
                console.log('   ‚ùå –ß–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        } else {
            console.log('‚ùå –ö–ª–∞—Å—Å—ã SymbolHeader_watchButton__ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        console.log('');
        
        // –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "watchers"
        console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "watchers"');
        
        const anyWatchersPattern = /class="[^"]*watchers[^"]*"/gi;
        const anyWatchersClasses = [...htmlContent.matchAll(anyWatchersPattern)];
        
        if (anyWatchersClasses.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${anyWatchersClasses.length} –∫–ª–∞—Å—Å–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "watchers":`);
            
            anyWatchersClasses.slice(0, 5).forEach((match, i) => {
                console.log(`   ${i + 1}. ${match[0]}`);
                
                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏ —á–∏—Å–ª–∞ –≤ –Ω–∏—Ö
                const classValue = match[0].match(/class="([^"]*)"/)[1];
                const elementRegex = new RegExp(`class="[^"]*${classValue.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}[^"]*"[^>]*>([^<]*(?:<[^>]*>[^<]*)*?)(?=<(?!\/)|\s*$)`, 'g');
                
                const elementContent = [...htmlContent.matchAll(elementRegex)];
                elementContent.forEach((content, j) => {
                    const text = content[1].replace(/<[^>]*>/g, '').trim();
                    if (text) {
                        console.log(`      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ${j + 1}: "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"`);
                        
                        const numberMatch = text.match(/\d{1,3}(?:,\d{3})*/);
                        if (numberMatch) {
                            console.log(`      üéØ –ß–ò–°–õ–û: ${numberMatch[0]}`);
                        }
                    }
                });
            });
        } else {
            console.log('‚ùå –ö–ª–∞—Å—Å—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "watchers" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        console.log('\n' + '='.repeat(80) + '\n');
    });
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
findFlexibleWatchers();