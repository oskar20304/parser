const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const { findWatchersNumber } = require('./universal-selector');

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
 */
async function testSelectorSimple() {
    console.log('üß™ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞...\n');
    
    const debugDir = path.join(__dirname, 'debug');
    const htmlFiles = fs.readdirSync(debugDir).filter(f => f.endsWith('.html'));
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n`);
    
    const browser = await puppeteer.launch({ 
        headless: "new",
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    try {
        for (const file of htmlFiles) {
            const symbol = file.match(/debug_([A-Z]+)_/)?.[1] || 'UNKNOWN';
            console.log(`${'='.repeat(50)}`);
            console.log(`üîç –¢–ï–°–¢: ${symbol} (${file})`);
            console.log(`${'='.repeat(50)}`);
            
            const htmlPath = path.join(debugDir, file);
            const htmlContent = fs.readFileSync(htmlPath, 'utf8');
            
            const page = await browser.newPage();
            
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
                await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });
                
                console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file}`);
                console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(htmlContent.length / 1024)}KB\n`);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
                const watchersNumber = await findWatchersNumber(page, symbol);
                
                if (watchersNumber) {
                    console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û: ${watchersNumber}\n`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∏—Å–ª–∞
                    const expectedNumbers = {
                        'CLSK': '51,527',
                        'HIVE': '24,593'
                    };
                    
                    if (expectedNumbers[symbol]) {
                        const expected = expectedNumbers[symbol];
                        if (watchersNumber === expected) {
                            console.log(`üéØ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï —Å –æ–∂–∏–¥–∞–µ–º—ã–º: ${expected}`);
                        } else {
                            console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ: "${watchersNumber}", –æ–∂–∏–¥–∞–ª–æ—Å—å: "${expected}"`);
                        }
                    }
                } else {
                    console.log(`‚ùå –ß–∏—Å–ª–æ watchers –ù–ï –Ω–∞–π–¥–µ–Ω–æ\n`);
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å "watchers" –≤ –∫–ª–∞—Å—Å–µ
                    console.log(`üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "watchers" –≤ –∫–ª–∞—Å—Å–µ:`);
                    const watchersElements = await page.evaluate(() => {
                        const elements = Array.from(document.querySelectorAll('*'));
                        const matches = [];
                        
                        elements.forEach(el => {
                            if (el.className && el.className.toString().toLowerCase().includes('watchers')) {
                                matches.push({
                                    className: el.className.toString(),
                                    textContent: el.textContent?.trim().substring(0, 100) || '',
                                    tagName: el.tagName.toLowerCase()
                                });
                            }
                        });
                        
                        return matches.slice(0, 5);
                    });
                    
                    if (watchersElements.length > 0) {
                        console.log(`   –ù–∞–π–¥–µ–Ω–æ ${watchersElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`);
                        watchersElements.forEach((el, i) => {
                            console.log(`   ${i + 1}. <${el.tagName}> class="${el.className}"`);
                            console.log(`      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: "${el.textContent}"`);
                        });
                    } else {
                        console.log(`   ‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å "watchers" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                    }
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞:`, error.message);
            } finally {
                await page.close();
            }
            
            console.log('');
        }
        
        console.log(`${'='.repeat(50)}`);
        console.log('üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log(`${'='.repeat(50)}`);
        
    } finally {
        await browser.close();
    }
}

// –ó–∞–ø—É—Å–∫
testSelectorSimple().catch(console.error);